package player;
/* ====================================================================== */
/**
 * @brief ジャンケンのプレイヤーを表す抽象クラス
 *
 * @note 具体的なプレイヤークラスはここから派生する
 * @see Object
 */
/* ====================================================================== */
public abstract class Player {
	/* ====フィールド==== */
	private static final String[] HANDS = {"グー","チョキ","パー"}; //ジャンケンの手(定数)
	private int mHand; //ジャンケンの手(プレイヤーの出す手)
	/* ====================================================================== */
	/**
	 * @brief ジャンケンの手ををあらわす文字列を返却する抽象メソッド
	 *
	 * @param 
	 *
	 * @return 
	 *
	 * @note
	 * クラスPlayerから派生するクラスでこのメソッドの本体を実装する
	 * 
	 */
	/* ====================================================================== */
	public abstract String toString();
	
	/* ====================================================================== */
	/**
	 * @brief ジャンケンの出す手を決定する抽象メソッド
	 *
	 * @param 
	 *
	 * @return 
	 *
	 * @note
	 * クラスShapeから派生するクラスでこのメソッドの本体を実装する
	 * 
	 */
	/* ====================================================================== */
	public abstract void setHand();
	
	/* ====================================================================== */
	/**
	 * @brief ジャンケンの出す手を取得するメソッド
	 *
	 * @param 
	 *
	 * @return インスタンスのジャンケンの手
	 *
	 * @note
	 * 
	 * 
	 */
	/* ====================================================================== */
	public int getHand(){
		return mHand;
	}
	
	/* ====================================================================== */
	/**
	 * @brief ジャンケンの勝敗結果を返却する抽象メソッド
	 *
	 * @param 
	 *
	 * @return 
	 *
	 * @note
	 * 
	 * 
	 */
	/* ====================================================================== */
	public int getResult(Player player){
		int myHand
	}
	
	/* ====================================================================== */
	/**
	 * @brief 図形情報の表示と図形の描写を行うメソッド
	 *
	 * @param enemyPlayer 対戦相手
	 *
	 * @return 
	 *
	 * @note
	 * 
	 */
	/* ====================================================================== */
	public void play(Player enemyPlayer){
		int enemyHand; //対戦相手のジャンケンの手
		int judge; 
		
		//対戦相手の手を決定
		enemyPlayer.setHand();
		//対戦相手のジャンケンの手を取得
		enemyHand = enemyPlayer.getHand(); 
		
		//setHandメソッドを呼び出して出す手を決定
		setHand();
		//toStringメソッドを呼び出して出した手の情報の出力
		System.out.println(toString());
		//toStringメソッドを呼び出して.対戦相手の出した手の情報の出力
		System.out.println(enemyPlayer.toString());
		
		//getResultメソッドを呼び出して勝敗情報の出力
	}

}