package shape;
/* ====================================================================== */
/**
 * @brief 右下が直角の二等辺三角形を表す実装クラス
 *
 * @note このクラスは抽象クラスAbstIsosRightTriangleから派生したクラス
 * 具体的な右下直角の二等辺三角形インスタンスは、このクラスで生成する
 * @see Shape
 * @see AbstIsosRightTriangle
 */
/* ====================================================================== */
public class DownRightTri extends AbstIsosRightTriangle {
	
	/* ====フィールド==== */
	//なし
	
	/* ====コンストラクタ====================================================== */
	/**
	 * @param sides 辺の長さ
	 * 
	 * @note 辺の長さを受け取るスーパークラスのコンストラクタを呼び出す
	 */
	/* ====================================================================== */
	public DownRightTri(int sides) {
		//スーパークラスのコンストラクタを呼び出して辺の長さを設定
		super(sides);
	}
	
	/* ====================================================================== */
	/**
	 * @brief 辺に関する図形情報を表す文字列を返却する
	 *
	 * @param
	 *
	 * @return 
	 *
	 * @note
	 * 
	 */
	/* ====================================================================== */
	@Override
	public String toString() {
		//辺に関する情報を文字列で返却
		return "DownRightTri(sides:" + getSides() + ")";
	}
	
	/* ====================================================================== */
	/**
	 * @brief 右下直角の二等辺三角形を描写する実装メソッド
	 *
	 * @param
	 *
	 * @return 
	 *
	 * @note
	 * 
	 */
	/* ====================================================================== */
	@Override
	public void draw() {
		int tmpSpace = getSides() - 1; //空白スペース描写用の変数(初期値は辺−１)
		
		//辺の長さ分周回して右下直角の二等辺三角形を描写する
		for(int i = 0 ; i < getSides() ; i++){
			
			//空白スペースを描写する
			for(int j = 0 ; j < tmpSpace ; j++){
				System.out.print("　");
			}
			//＊を描写する
			for(int j = 0 ; j < getSides() - tmpSpace ; j++){
				System.out.print("＊");
			}
			//１行出力終わったら改行
			System.out.println();
			//空白スペースを1減算
			tmpSpace--;
		}

	}

}